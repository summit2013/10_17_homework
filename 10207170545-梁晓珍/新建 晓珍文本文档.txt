操作系统的作业：(Linux下的进程管理)
1. 进程的创建
使用系统调用fork()创建两个子进程，当此程序运行时，在系统中有一个父进程和两个子进程活动。让每一个进程在屏幕上显示一个字符：父进程显示字符：“a" 子进程显示字符:"b"和"c"，试观察记录屏幕显示的结果，并分析原因。
#include <stdio.h>
main()
{
  int p1,p2;
  while((p1==fork())==-1;  /*创建子进程p1*/
  if (p1==0)   /*子进程创建成功*/
     putchar(‘b’);
  else
{
 while((p2==fork())==-1);   /*创建另一个子进程 */
 if(p2==0)     /*子进程创建成功*/
    putchar(‘c’);
 else putchar(‘a’);     /*父进程执行*/
}
}
<运行结果>
bca(或bac)
分析：从进程并发执行来看，输出bac,acb等情况都有可能。
原因：fork()创建进程所需的时间要多于输出一个字符的时间，因此在主进程创建进程2的同时，进程1就输出了“b”，而进程2和主程序的输出次序是有随机性的，所以会出现上述结果。


2. 修改上述程序，将每个进程输出一个字符改为每个进程输出一句话，再观察程序执行的现象，并分析原因。
  #include <stdio.h>
  main()
{
 int p1,p2,i;
 while ((p1==fork())==-1);
    if (p1==0)
for (i=0;i<500;i++)
      printf (“child %d/n”,i);
 else
{
     while ((p2==fork())==-1);
     if (p2==0)
       for(i=0;i<500;i++)
         printf(“son%d\n”,i)
     else
for (i=0;i<500;i++)
               printf (“daughter %d\n”,i);
}
}
<运行结果>
child…
son…
daughter…
daughter…
或 child
…son
…child
…son
…daughter
…等
分析：由于函数printf()输出的字符串之间不会被中断，因此，字符串内部的字符顺序输出时不变，但是，由于进程并发执行时的调度顺序和父子进程的抢占处理机问题，输出字符串的顺序和先后随着执行的不同而发生变化。这与打印单字符的结果相同。


3.修改2的程序，使用系统调用lockf() 来给每一个进程加锁，可以实现进程间的互斥，观察并分析出现的现象。
#include <stdio.h>
main()
{
  int p1,p2,i;
     while ((p1==fork())==-1);
  if (p1==0)
  {
lockf (1,1,0);
for (i=0;i<500;i++)   printf (“child%d/n”,i);
lockf(1,0,0);
}
else
{
  while ((p2==fork())==-1);
  if (p2==0)
{
  lockf (1,1,0);
  for (i=0;i<500;i++)    printf(“son%d\n”,i);
  lockf(1,0,0);
}
else
{ 
  lockf(1,1,0);
    for(i=0;i<500;i++)      printf(“daughter %d\n”,i);
    lockf(1,0,0);
}
}
}
<运行结果>
大致与未上锁的输出结果相同，也是随着执行时间不同，输出结果的顺序有所不同。
分析：因为上述程序执行时，不同进程之间不存在共享临界资源（其中打印机的互斥性已由操作系统保证）问题，所以，加锁与不加锁效果相同。


